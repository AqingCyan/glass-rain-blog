---
import dayjs from 'dayjs'
import BaseLayout from './BaseLayout.astro'
import '../styles/markdown.style.css'

const { frontmatter, headings } = Astro.props
const image = frontmatter.image || 'https://aqingcyan.me/favicon.png'
---

<head>
  <meta name="twitter:title" content={frontmatter.title} />
  <meta name="twitter:description" content={frontmatter.description} />
  <meta name="twitter:creator" content="@purexitong0101" />
  <meta name="twitter:card" content="summary_large_image" />
  <meta name="twitter:image" content={image} />
</head>
<BaseLayout pageTitle={frontmatter.title}>
  <h1 class="blog-title">{frontmatter.title}</h1>
  <p class="blog-info">
    By <em>{frontmatter.author}</em>
    <span class="date">{dayjs(frontmatter.pubDate).format('YYYY/MM/DD')}</span>
    {frontmatter.tags.map((tag) => <span class="tag">{tag}</span>)}
  </p>
  <article class="article">
    <slot />
  </article>
  <div class="toc-close">
    {
      headings
        .filter((head) => [2, 3].includes(head.depth))
        .map((head) => (
          <p>
            <span style={`width: ${(3 / head.depth) * 1}rem; margin-right: ${2 - (3 / head.depth) * 1}rem`} />
            <a href={`#${head.slug}`}>{head.text}</a>
          </p>
        ))
    }
  </div>

  <div class="toc-open">
    {
      headings
        .filter((head) => [2, 3].includes(head.depth))
        .map((head) => (
          <p>
            <span style={`width: ${(3 / head.depth) * 1}rem; margin-right: ${2 - (3 / head.depth) * 1}rem`} />
            <a href={`#${head.slug}`}>{head.text}</a>
          </p>
        ))
    }
  </div>
</BaseLayout>

<style is:global>
  .blog-title {
    margin: 0;
    font-size: 1.75rem;
    font-weight: 400;
    color: var(--primary-color);
  }

  .blog-info {
    display: flex;
    align-items: center;
    flex-wrap: wrap;
    margin: 1rem 0 2.5rem;
    font-size: 0.8125rem;
    color: var(--primary-color);
  }

  .blog-info em {
    margin-left: 0.3rem;
  }

  .blog-info .date {
    margin: 0 0.5rem;
    font-family: 'ABeeZee';
    color: var(--second-color);
  }

  .blog-info .tag {
    margin: 0.3rem 0.2rem;
    padding: 0.125rem 0.75rem;
    box-sizing: border-box;
    border: 1px solid var(--theme-color);
    border-radius: 2px;
    font-size: 0.75rem;
    color: var(--theme-color);
  }

  .toc-close,
  .toc-open {
    position: fixed;
    top: 30%;
    right: 1rem;
  }

  .toc-open {
    opacity: 0;
    pointer-events: none;
    transition: opacity 0.2s;
  }

  .toc-close p a {
    opacity: 0;
  }

  .toc-open p,
  .toc-close p {
    display: flex;
    align-items: center;
    margin: 0;
    font-size: 0.75rem;
    line-height: 1.875rem;
    color: var(--toc-color);
  }

  .toc-open p span,
  .toc-close p span {
    display: block;
    height: 0.375rem;
    background: #d9d9d9;
    border-radius: 0.1875rem;
  }

  .toc-close p span {
    width: 0.375rem !important;
  }

  .toc-open p a,
  .toc-close p a {
    color: unset;
    text-decoration: none;
    width: 10rem;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
  }

  .toc-open p a::after {
    display: none;
  }

  @media screen and (max-width: 1050px) {
    .toc-close,
    .toc-open {
      display: none;
    }
  }
</style>

<script>
  const elements = [...(document.getElementsByClassName('icon-link') || [])]
  elements.forEach((ele) => (ele.innerHTML = '#'))

  const tocCloseEle = document.getElementsByClassName('toc-close')[0] as HTMLElement
  const tocOpenEle = document.getElementsByClassName('toc-open')[0] as HTMLElement
  tocCloseEle.addEventListener('mouseover', () => {
    tocCloseEle.style.opacity = '0'
    tocOpenEle.style.opacity = '1'
  })
  tocCloseEle.addEventListener('mouseout', () => {
    tocCloseEle.style.opacity = '1'
    tocOpenEle.style.opacity = '0'
  })
</script>
